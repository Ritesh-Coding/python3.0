# Generated by Django 4.2.13 on 2024-06-11 03:33

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import job_form.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0013_alter_user_username'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(max_length=15)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BasicDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstName', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(code='invalid_registration', message='Enter a valid First name.', regex='^[a-zA-Z\\s-]+$')])),
                ('lastName', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(code='invalid_registration', message='Enter a valid Last name.', regex='^[a-zA-Z\\s-]+$')])),
                ('designation', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(code='invalid_registration', message='Enter a valid Last name.', regex='^[a-zA-Z\\s-]+$')])),
                ('address1', models.TextField()),
                ('address2', models.TextField()),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(validators=[job_form.models.validate_phone])),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=6)),
                ('cities', models.CharField(default='Ahmedabad', max_length=15)),
                ('states', models.CharField(max_length=10)),
                ('zip', models.CharField(validators=[job_form.models.validate_zip])),
                ('relationship', models.CharField(choices=[('single', 'Single'), ('married', 'Married')], max_length=8)),
                ('date_of_birth', models.DateField()),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WorkExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(code='invalid_registration', message='Enter a valid Company name.', regex='^[a-zA-Z\\s-]+$')])),
                ('designation', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(code='invalid_registration', message='Enter a valid Designation name.', regex='^[a-zA-Z\\s-]+$')])),
                ('from1', models.DateField()),
                ('to1', models.DateField()),
                ('employee_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='job_form.basicdetails')),
            ],
        ),
        migrations.CreateModel(
            name='TechnologiesKnown',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('technologies_known', models.CharField(choices=[('php', 'PHP'), ('mysql', 'MYSQL'), ('laravel', 'LARAVEL'), ('oracle', 'ORACLE')], max_length=15)),
                ('level_of_expertise', models.CharField(choices=[('beginner', 'Begineer'), ('mediator', 'Mediator'), ('expertise', 'Expertise')], default=None, max_length=9)),
                ('employee_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='job_form.basicdetails')),
            ],
        ),
        migrations.CreateModel(
            name='SSCHSCDETAILS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_of_board', models.CharField(choices=[('GSEB', 'GSEB'), ('CBSC', 'CBSC'), ('Bachelor_Degree', 'Bachelor_Degree'), ('Master_Degree', 'Master_Degree'), ('PHD', 'PHD')], default=None, max_length=15)),
                ('passing_year', models.CharField(validators=[django.core.validators.RegexValidator(code='invalid_registration', message='Enter a valid Passing Year.', regex='^(19\\d{2}|20[0-9]{2})$')])),
                ('percentage', models.CharField(validators=[django.core.validators.RegexValidator(code='invalid_registration', message='Enter a valid Percentage.', regex='^100(\\.0{1,2})?$|^(\\d{1,2}(\\.\\d{1,2})?)$')])),
                ('employee_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='job_form.basicdetails')),
            ],
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(code='invalid_registration', message='Enter a valid  name.', regex='^[a-zA-Z\\s-]+$')])),
                ('contact_no', models.CharField(validators=[job_form.models.validate_phone])),
                ('Relation', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(code='invalid_registration', message='Enter a valid  name.', regex='^[a-zA-Z\\s-]+$')])),
                ('employee_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='job_form.basicdetails')),
            ],
        ),
        migrations.CreateModel(
            name='Preference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preference_location', models.TextField()),
                ('notice_period', models.CharField(max_length=15)),
                ('expected_ctc', models.CharField(max_length=15)),
                ('current_ctc', models.CharField(max_length=15)),
                ('department', models.CharField(choices=[('development', 'Development'), ('department', 'Department'), ('marketing', 'Marketing')], max_length=25)),
                ('employee_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='job_form.basicdetails')),
            ],
        ),
        migrations.CreateModel(
            name='LanguageKnown',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_known', models.CharField(choices=[('hindi', 'Hindi'), ('gujarati', 'Gujarati'), ('english', 'English')], max_length=15)),
                ('can_read', models.BooleanField()),
                ('can_write', models.BooleanField()),
                ('can_speak', models.BooleanField()),
                ('employee_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='job_form.basicdetails')),
            ],
        ),
    ]
